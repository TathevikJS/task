{"ast":null,"code":"import { fetchCategories } from \"../services/api\";\nexport const getInitialFormData = item => ({\n  id: (item === null || item === void 0 ? void 0 : item.id) || Date.now(),\n  title: (item === null || item === void 0 ? void 0 : item.title) || '',\n  thumbnail: (item === null || item === void 0 ? void 0 : item.thumbnail) || '',\n  description: (item === null || item === void 0 ? void 0 : item.description) || '',\n  fullDescription: (item === null || item === void 0 ? void 0 : item.fullDescription) || '',\n  category: (item === null || item === void 0 ? void 0 : item.category) || '',\n  rating: (item === null || item === void 0 ? void 0 : item.rating) || 0\n});\nexport const validateField = (name, formData, errors) => {\n  const newErrors = {\n    ...errors\n  };\n  if (name === 'title' && !formData.title) {\n    newErrors.title = 'Title is required';\n  } else if (name === 'thumbnail' && !/^(http|https):\\/\\/[^ \"]+$/.test(formData.thumbnail)) {\n    newErrors.thumbnail = 'Thumbnail URL is invalid';\n  } else if (name === 'description' && !formData.description) {\n    newErrors.description = 'Short Description is required';\n  } else if (name === 'fullDescription' && !formData.fullDescription) {\n    newErrors.fullDescription = 'Full Description is required';\n  } else if (name === 'category' && !formData.category) {\n    newErrors.category = 'Category is required';\n  } else if (name === 'rating' && (formData.rating === undefined || formData.rating < 0)) {\n    newErrors.rating = 'Rating must be a non-negative number';\n  } else {\n    delete newErrors[name];\n  }\n  return newErrors;\n};\nexport const validateForm = (formData, setErrors) => {\n  let isValid = true;\n  const requiredFields = ['title', 'description', 'fullDescription', 'category'];\n  requiredFields.forEach(field => {\n    if (!formData[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: `${field.charAt(0).toUpperCase() + field.slice(1)} is required`\n      }));\n      isValid = false;\n    } else {\n      setErrors(prev => validateField(field, formData, prev));\n    }\n  });\n  return isValid;\n};\nexport const loadCategories = async setCategories => {\n  const res = await fetchCategories();\n  setCategories(res);\n};","map":{"version":3,"names":["fetchCategories","getInitialFormData","item","id","Date","now","title","thumbnail","description","fullDescription","category","rating","validateField","name","formData","errors","newErrors","test","undefined","validateForm","setErrors","isValid","requiredFields","forEach","field","prev","charAt","toUpperCase","slice","loadCategories","setCategories","res"],"sources":["/Users/poghosbarseghyan/Desktop/task/src/utils/formHelpers.ts"],"sourcesContent":["import { fetchCategories } from \"../services/api\";\nimport { Item } from \"../types/ItemTypes\";\n\n\ntype ValidItemKeys = keyof Item;\n\nexport const getInitialFormData = (item?: Item): Item => ({\n  id: item?.id || Date.now(),\n  title: item?.title || '',\n  thumbnail: item?.thumbnail || '',\n  description: item?.description || '',\n  fullDescription: item?.fullDescription || '',\n  category: item?.category || '',\n  rating: item?.rating || 0,\n});\n\nexport const validateField = (name: ValidItemKeys, formData: Item, errors: { [key: string]: string }): { [key: string]: string } => {\n  const newErrors: { [key: string]: string } = { ...errors };\n\n  if (name === 'title' && !formData.title) {\n    newErrors.title = 'Title is required';\n  } else if (name === 'thumbnail' && !/^(http|https):\\/\\/[^ \"]+$/.test(formData.thumbnail)) {\n    newErrors.thumbnail = 'Thumbnail URL is invalid';\n  } else if (name === 'description' && !formData.description) {\n    newErrors.description = 'Short Description is required';\n  } else if (name === 'fullDescription' && !formData.fullDescription) {\n    newErrors.fullDescription = 'Full Description is required';\n  } else if (name === 'category' && !formData.category) {\n    newErrors.category = 'Category is required';\n  } else if (name === 'rating' && (formData.rating === undefined || formData.rating < 0)) {\n    newErrors.rating = 'Rating must be a non-negative number';\n  } else {\n    delete newErrors[name];\n  }\n\n  return newErrors;\n};\n\nexport const validateForm = (formData: Item, setErrors: React.Dispatch<React.SetStateAction<{ [key: string]: string }>>): boolean => {\n  let isValid = true;\n  const requiredFields: ValidItemKeys[] = ['title', 'description', 'fullDescription', 'category'];\n  requiredFields.forEach((field) => {\n    if (!formData[field]) {\n      setErrors((prev) => ({\n        ...prev,\n        [field]: `${field.charAt(0).toUpperCase() + field.slice(1)} is required`,\n      }));\n      isValid = false;\n    } else {\n      setErrors((prev) => validateField(field, formData, prev));\n    }\n  });\n\n  return isValid;\n};\n\nexport const loadCategories = async (setCategories: React.Dispatch<React.SetStateAction<{ id: number, name: string }[]>>) => {\n  const res = await fetchCategories();\n  setCategories(res as { id: number, name: string }[]);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}